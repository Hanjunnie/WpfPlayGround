# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build and Release MSIX

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_PATH: WpfPlayground/WpfPlayground.csproj
  WAPPROJ_PATH: WpfPlayground_msix/WpfPlayground_msix.wapproj
  SOLUTION_PATH: WpfPlayground.sln

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup DevExpress NuGet Feed
      run: |
        dotnet nuget add source https://nuget.devexpress.com/api -n DXFeed -u DevExpress -p ${{ secrets.DEVEXPRESS_NUGET_KEY }} --store-password-in-clear-text
      continue-on-error: true
      
    - name: Restore NuGet packages
      run: nuget restore ${{ env.SOLUTION_PATH }}
      
    - name: Decode and import certificate
      run: |
        $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.CERTIFICATE_BASE64 }}")
        $pfxPath = "certificate.pfx"
        [IO.File]::WriteAllBytes($pfxPath, $pfxBytes)
        
        Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String "${{ secrets.CERTIFICATE_PASSWORD }}" -AsPlainText -Force)
      shell: pwsh
      
    - name: Build MSIX package
      run: |
        msbuild ${{ env.WAPPROJ_PATH }} `
          /p:Configuration=Release `
          /p:Platform=x64 `
          /p:UapAppxPackageBuildMode=StoreUpload `
          /p:AppxBundle=Always `
          /p:AppxPackageDir="${{ github.workspace }}\AppPackages\" `
          /p:GenerateAppxPackageOnBuild=true `
          /p:AppxPackageSigningEnabled=true `
          /p:PackageCertificateKeyFile="${{ github.workspace }}\certificate.pfx" `
          /p:PackageCertificatePassword="${{ secrets.CERTIFICATE_PASSWORD }}"
      shell: pwsh
      
    - name: Upload MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: MSIX-Package
        path: WpfPlayground_msix/appPackage/**/*
        
    # FTP 업로드 - 방법 1: FTP Deploy Action 사용 (권장)
    - name: Upload to FTP Server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: 21
        protocol: ftps
        local-dir: ./WpfPlayground_msix/AppPackages/    # ← 여기!
        server-dir: /releases/${{ github.ref_name }}/   # ← FTP 서버 경로
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          