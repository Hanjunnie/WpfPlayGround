# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop - MSIX Deploy (Path Fixed)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_NAME: WpfPlayGround
  Solution_Name: wpfplayGround.sln
  Wap_Project_Path: WpfPlayGround_msix\WpfPlayGround_msix.wapproj
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64

jobs:
  build:
    runs-on: windows-latest

    steps:
    # ⭐ 중요: 중복된 경로 제거
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: src  # ← 추가: 'src' 폴더에 체크아웃

    # ⭐ 작업 디렉토리를 src로 변경
    - name: Set working directory
      run: |
        Write-Host "작업 디렉토리 변경: ${{ github.workspace }}\"
        cd "${{ github.workspace }}"
        Write-Host "현재 위치: $PWD"
      shell: pwsh

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
      
    - name: Add DevExpress NuGet feed
      working-directory: ${{ github.workspace }}\src
      run: dotnet nuget add source "${{ secrets.DEVEXPRESS_NUGET_KEY }}" --name DevExpress
      continue-on-error: true

    - name: Restore NuGet packages
      working-directory: ${{ github.workspace }}\src
      run: nuget restore ${{ env.Solution_Name }}

    - name: Decode certificate
      run: |
        $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.CERT_BASE64 }}")
        $pfxPath = Join-Path $env:TEMP "certificate.pfx"
        [System.IO.File]::WriteAllBytes($pfxPath, $pfxBytes)
        echo "CERT_PATH=$pfxPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "✓ Certificate prepared at: $pfxPath"
      shell: pwsh

    - name: Build MSIX package
      working-directory: ${{ github.workspace }}\src
      run: |
        Write-Host "=== MSIX 패키지 빌드 ===" -ForegroundColor Cyan
        Write-Host "작업 디렉토리: $PWD" -ForegroundColor Gray
        Write-Host "프로젝트 경로: ${{ env.Wap_Project_Path }}" -ForegroundColor Gray
        Write-Host ""
        
        msbuild ${{ env.Wap_Project_Path }} `
          /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
          /p:Platform=${{ env.BUILD_PLATFORM }} `
          /p:UapAppxPackageBuildMode=SideloadOnly `
          /p:AppxBundle=Always `
          /p:AppxPackageDir="${{ github.workspace }}\src\AppPackages\" `
          /p:PackageCertificateKeyFile="${{ env.CERT_PATH }}" `
          /p:PackageCertificatePassword="${{ secrets.CERT_PASSWORD }}" `
          /verbosity:minimal
        
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✓ 빌드 성공!" -ForegroundColor Green
        } else {
          Write-Host "❌ 빌드 실패!" -ForegroundColor Red
          exit $LASTEXITCODE
        }
      shell: pwsh

    - name: Verify build output
      working-directory: ${{ github.workspace }}\src
      run: |
        Write-Host "=== 빌드 결과 확인 ===" -ForegroundColor Cyan
        
        if (Test-Path "AppPackages") {
          $msixFiles = Get-ChildItem -Path "AppPackages" -Recurse -File | 
            Where-Object { $_.Extension -in @('.msix', '.msixbundle', '.appx', '.appxbundle') }
          
          if ($msixFiles) {
            Write-Host "✓ MSIX 패키지 파일:" -ForegroundColor Green
            foreach ($file in $msixFiles) {
              $size = [math]::Round($file.Length / 1MB, 2)
              Write-Host "  - $($file.Name) ($size MB)" -ForegroundColor White
            }
          }
        } else {
          Write-Host "⚠ AppPackages 폴더가 생성되지 않았습니다" -ForegroundColor Yellow
        }
      shell: pwsh

    - name: Get version from package
      id: version
      working-directory: ${{ github.workspace }}\src
      run: |
        $manifestPath = Get-ChildItem -Path "AppPackages" -Recurse -Filter "AppxManifest.xml" | Select-Object -First 1
        if ($manifestPath) {
          [xml]$manifest = Get-Content $manifestPath.FullName
          $version = $manifest.Package.Identity.Version
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "✓ Package version: $version"
        } else {
          Write-Host "⚠ AppxManifest.xml not found"
          echo "VERSION=0.0.0.0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }
      shell: pwsh

    - name: Upload to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: ${{ secrets.FTP_PORT || 21 }}
        protocol: ${{ secrets.FTP_PROTOCOL || 'ftp' }}
        local-dir: ${{ github.workspace }}/src/AppPackages/
        server-dir: /msix-packages/${{ env.PROJECT_NAME }}/
        dangerous-clean-slate: false

    - name: Create version file
      working-directory: ${{ github.workspace }}\src
      run: |
        $versionInfo = @{
          version = "${{ steps.version.outputs.VERSION }}"
          buildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          commitHash = "${{ github.sha }}"
          commitMessage = "${{ github.event.head_commit.message }}"
        }
        $versionInfo | ConvertTo-Json | Out-File -FilePath "version.json"
        Write-Host "✓ Version file created"
      shell: pwsh

    - name: Upload version file to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: ${{ secrets.FTP_PORT || 21 }}
        protocol: ${{ secrets.FTP_PROTOCOL || 'ftp' }}
        local-dir: ${{ github.workspace }}/src/
        server-dir: /msix-packages/${{ env.PROJECT_NAME }}/
        dangerous-clean-slate: false
        include: version.json

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSIX-Package-${{ steps.version.outputs.VERSION }}
        path: ${{ github.workspace }}/src/AppPackages/**/*
        retention-days: 30

    - name: Cleanup certificate
      if: always()
      run: |
        if (Test-Path $env:CERT_PATH) {
          Remove-Item $env:CERT_PATH -Force
          Write-Host "✓ Certificate file cleaned up"
        }
      shell: pwsh
