# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build and Release MSIX

on:
  push:
    branches: [ ActionTest ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_PATH: WpfPlayground/WpfPlayground.csproj
  WAPPROJ_PATH: WpfPlayground_msix/WpfPlayground_msix.wapproj
  SOLUTION_PATH: WpfPlayground.sln

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      
    - name: Setup DevExpress NuGet Feed
      run: |
        dotnet nuget add source https://nuget.devexpress.com/api -n DXFeed -u DevExpress -p ${{ secrets.DEVEXPRESS_NUGET_KEY }} --store-password-in-clear-text
      continue-on-error: true
      
    - name: Decode certificate
      run: |
        $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.CERT_BASE64 }}")
        $pfxPath = Join-Path $env:TEMP "certificate.pfx"
        [System.IO.File]::WriteAllBytes($pfxPath, $pfxBytes)
        echo "CERT_PATH=$pfxPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "✓ Certificate prepared at: $pfxPath"
      shell: pwsh

    - name: Setup DevExpress NuGet Source
      run: |
        Write-Host "🔧 DevExpress NuGet 소스 설정 중..."
  
        try {
          # 기존 소스 확인 및 제거
          $existingSource = dotnet nuget list source 2>&1 | Select-String "DevExpress"
          if ($existingSource) {
            Write-Host "  ℹ️  기존 DevExpress 소스 제거 중..."
            dotnet nuget remove source DevExpress 2>&1 | Out-Null
            }
            } catch {
        Write-Host "  ℹ️  제거할 DevExpress 소스 없음"
        }
    
        Write-Host "  📦 DevExpress 소스 추가 중..."
        dotnet nuget add source https://nuget.devexpress.com/api `
          --name DevExpress `
          --username DevExpress `
          --password "${{ secrets.DEVEXPRESS_NUGET_KEY }}" `
          --store-password-in-clear-text
    
        if ($LASTEXITCODE -eq 0) {
          Write-Host "  ✅ dotnet: DevExpress 소스 추가 완료"
        } else {
          Write-Host "  ⚠️  dotnet: DevExpress 소스 추가 실패 (이미 존재할 수 있음)"
        }
    
        try {
          $existingNugetSource = nuget sources list 2>&1 | Select-String "DevExpress"
          if ($existingNugetSource) {
              Write-Host "  ℹ️  기존 NuGet DevExpress 소스 제거 중..."
              nuget sources Remove -Name DevExpress 2>&1 | Out-Null
          }
        } catch {
        Write-Host "  ℹ️  제거할 NuGet DevExpress 소스 없음"
        }
    
        Write-Host "  📦 NuGet DevExpress 소스 추가 중..."
        nuget sources Add -Name DevExpress `
          -Source https://nuget.devexpress.com/api `
          -Username DevExpress `
          -Password "${{ secrets.DEVEXPRESS_NUGET_KEY }}" `
          -StorePasswordInClearText
    
        if ($LASTEXITCODE -eq 0) {
            Write-Host "  ✅ nuget: DevExpress 소스 추가 완료"
        } else {
            Write-Host "  ⚠️  nuget: DevExpress 소스 추가 실패 (이미 존재할 수 있음)"
        }
    
        Write-Host ""
        Write-Host "✅ DevExpress NuGet 소스 설정 완료"
    
        # 최종 소스 목록 확인
        Write-Host ""
        Write-Host ""
        Write-Host "📋 등록된 NuGet 소스:"
        dotnet nuget list source
      shell: pwsh
      
    # 방법 1: dotnet restore (권장)
    - name: Restore packages with dotnet
      run: |
        Write-Host "📦 dotnet restore 실행..."
        dotnet restore "${{ env.SOLUTION_PATH }}"
        
        Write-Host "✅ dotnet restore 완료"
      shell: pwsh
      env:
        DEVEXPRESS_NUGET_KEY: ${{ secrets.DEVEXPRESS_NUGET_KEY }}
      
    # project.assets.json 파일 확인
    - name: Verify package restore
      run: |
        Write-Host "🔍 복원 결과 확인"
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        $assetsFile = "WpfPlayground/obj/project.assets.json"
        
        if (Test-Path $assetsFile) {
            Write-Host "✅ project.assets.json 파일 존재"
            $fileSize = (Get-Item $assetsFile).Length
            Write-Host "   파일 크기: $([math]::Round($fileSize/1KB, 2)) KB"
        } else {
            Write-Host "❌ project.assets.json 파일이 없습니다!"
            Write-Host "   경로: $assetsFile"
            
            # obj 폴더 내용 확인
            if (Test-Path "WpfPlayground/obj") {
                Write-Host ""
                Write-Host "obj 폴더 내용:"
                Get-ChildItem "WpfPlayground/obj" -Recurse | ForEach-Object {
                    Write-Host "  - $($_.FullName)"
                }
            }
            
            exit 1
        }
        
        # 패키지 복원 로그 확인
        Write-Host ""
        Write-Host "📋 복원된 패키지:"
        $packagesFolder = "WpfPlayground/obj/project.nuget.cache"
        if (Test-Path $packagesFolder) {
            Write-Host "  ✓ NuGet 캐시 존재"
        }
      shell: pwsh
      
    - name: Build MSIX package
      run: |
        msbuild ${{ env.WAPPROJ_PATH }} `
          /p:Configuration=Release `
          /p:Platform=x64 `
          /p:UapAppxPackageBuildMode=StoreUpload `
          /p:AppxBundle=Always `
          /p:AppxPackageDir="${{ github.workspace }}\AppPackages\" `
          /p:GenerateAppxPackageOnBuild=true `
          /p:AppxPackageSigningEnabled=true `
          /p:PackageCertificateKeyFile="${{ github.workspace }}\certificate.pfx" `
          /p:PackageCertificatePassword="${{ secrets.CERTIFICATE_PASSWORD }}"
      shell: pwsh
      
    - name: Upload MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: MSIX-Package
        path: WpfPlayground_msix/appPackage/**/*
        
    # FTP 업로드 - 방법 1: FTP Deploy Action 사용 (권장)
    - name: Upload to FTP Server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: 21
        protocol: ftps
        local-dir: ./WpfPlayground_msix/AppPackages/    # ← 여기!
        server-dir: /releases/${{ github.ref_name }}/   # ← FTP 서버 경로
        dangerous-clean-slate: false
        exclude: |
          **/.git*
          **/.git*/**
          
