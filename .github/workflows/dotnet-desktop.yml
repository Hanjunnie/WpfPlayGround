# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop - MSIX Deploy (Optimized)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï
  PROJECT_NAME: WpfPlayGround
  Solution_Name: wpfplayGround.sln
  App_Project_Path: WpfPlayGround/WpfPlayGround.csproj
  
  # MSIX ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï
  Wap_Project_Directory: WpfPlayGround_msix
  Wap_Project_Path: WpfPlayGround_msix\WpfPlayGround_msix.wapproj
  
  # ÎπåÎìú ÏÑ§Ï†ï
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: src  # ‚Üê Ï∂îÍ∞Ä!

    # Install .NET Core
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Setup MSBuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2
      
    # Setup NuGet
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
      
    # Add DevExpress NuGet feed (optional)
    - name: Add DevExpress NuGet feed
      run: dotnet nuget add source "${{ secrets.DEVEXPRESS_NUGET_KEY }}" --name DevExpress
      continue-on-error: true

    - name: Restore with RuntimeIdentifier
      working-directory: ${{ github.workspace }}\src
      run: |
        # ÏÜîÎ£®ÏÖò Î≥µÏõê
        nuget restore wpfplayGround.sln
    
        # RuntimeIdentifier Ìè¨Ìï® Î≥µÏõê ‚≠ê
        dotnet restore WpfPlayground\WpfPlayground.csproj -r win-x64

    # üéØ Î∞©Î≤ï 1: dotnet restore (Îπ†Î•¥Í≥† Ìö®Ïú®Ï†Å)
    - name: Restore .NET dependencies
      run: dotnet restore ${{ env.App_Project_Path }}

    # üéØ Î∞©Î≤ï 2: NuGet restore (MSIX ÌîÑÎ°úÏ†ùÌä∏Ïö©)
    - name: Restore NuGet packages
      run: nuget restore ${{ env.Solution_Name }}

    # Decode certificate
    - name: Decode certificate
      run: |
        $pfxBytes = [System.Convert]::FromBase64String("${{ secrets.CERT_BASE64 }}")
        $pfxPath = Join-Path $env:TEMP "certificate.pfx"
        [System.IO.File]::WriteAllBytes($pfxPath, $pfxBytes)
        echo "CERT_PATH=$pfxPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "‚úì Certificate prepared at: $pfxPath"
      shell: pwsh

    # üöÄ ÏòµÏÖò A: dotnet publishÎ°ú Ïï± ÎπåÎìú (ÏÑ†ÌÉùÏÇ¨Ìï≠ - ÎîîÎ≤ÑÍπÖÏö©)
    - name: Build app with dotnet publish (verification)
      run: |
        Write-Host "Building app to verify compilation..." -ForegroundColor Cyan
        dotnet publish ${{ env.App_Project_Path }} `
          -c ${{ env.BUILD_CONFIGURATION }} `
          --no-restore `
          -o ./publish-output
        Write-Host "‚úì App compiled successfully" -ForegroundColor Green
      shell: pwsh
      continue-on-error: true

    # üéØ ÏòµÏÖò B: MSBuildÎ°ú MSIX Ìå®ÌÇ§ÏßÄ ÏÉùÏÑ± (Î©îÏù∏)
    - name: Build MSIX package with MSBuild
      working-directory: ${{ github.workspace }}\src
      run: |
        Write-Host "Building MSIX package..." -ForegroundColor Cyan
        
        msbuild ${{ env.Wap_Project_Path }} `
          /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
          /p:Platform=${{ env.BUILD_PLATFORM }} `
          /p:RuntimeIdentifier=win-x64 `  # ‚Üê Ï∂îÍ∞Ä!
          /p:UapAppxPackageBuildMode=SideloadOnly `
          /p:AppxBundle=Always `
          /p:AppxPackageDir="${{ github.workspace }}\AppPackages\" `
          /p:PackageCertificateKeyFile="${{ env.CERT_PATH }}" `
          /p:PackageCertificatePassword="${{ secrets.CERT_PASSWORD }}" `
          /verbosity:minimal
        
        Write-Host "‚úì MSIX package built successfully" -ForegroundColor Green
      shell: pwsh

    # Get version from package
    - name: Get version from package
      id: version
      run: |
        $manifestPath = Get-ChildItem -Path "${{ github.workspace }}\AppPackages\" -Recurse -Filter "AppxManifest.xml" | Select-Object -First 1
        if ($manifestPath) {
          [xml]$manifest = Get-Content $manifestPath.FullName
          $version = $manifest.Package.Identity.Version
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "‚úì Package version: $version" -ForegroundColor Green
        } else {
          Write-Host "‚ö† AppxManifest.xml not found" -ForegroundColor Yellow
          echo "VERSION=0.0.0.0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }
      shell: pwsh

    # Verify package
    - name: Verify MSIX package
      run: |
        Write-Host "=== ÏÉùÏÑ±Îêú ÌååÏùº ÌôïÏù∏ ===" -ForegroundColor Cyan
        
        $msixFiles = Get-ChildItem -Path "${{ github.workspace }}\AppPackages\" -Recurse -Include "*.msix","*.msixbundle","*.appx","*.appxbundle"
        
        if ($msixFiles) {
          Write-Host "‚úì MSIX Ìå®ÌÇ§ÏßÄ ÌååÏùº:" -ForegroundColor Green
          foreach ($file in $msixFiles) {
            $relativePath = $file.FullName.Replace("${{ github.workspace }}\", "")
            $sizeKB = [math]::Round($file.Length / 1KB, 2)
            Write-Host "  - $relativePath ($sizeKB KB)" -ForegroundColor White
          }
        } else {
          Write-Host "‚ö† MSIX Ìå®ÌÇ§ÏßÄ ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§" -ForegroundColor Yellow
        }
      shell: pwsh

    # Upload to FTP
    - name: Upload to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: ${{ secrets.FTP_PORT || 21 }}
        protocol: ${{ secrets.FTP_PROTOCOL || 'ftp' }}
        local-dir: ./AppPackages/
        server-dir: /msix-packages/${{ env.PROJECT_NAME }}/
        dangerous-clean-slate: false

    # Create version file
    - name: Create version file
      run: |
        $versionInfo = @{
          version = "${{ steps.version.outputs.VERSION }}"
          buildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          commitHash = "${{ github.sha }}"
          commitMessage = "${{ github.event.head_commit.message }}"
        }
        $versionInfo | ConvertTo-Json | Out-File -FilePath "version.json"
        Write-Host "‚úì Version file created" -ForegroundColor Green
      shell: pwsh

    # Upload version file to FTP
    - name: Upload version file to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: ${{ secrets.FTP_PORT || 21 }}
        protocol: ${{ secrets.FTP_PROTOCOL || 'ftp' }}
        local-dir: ./
        server-dir: /msix-packages/${{ env.PROJECT_NAME }}/
        dangerous-clean-slate: false
        include: version.json

    # Upload artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSIX-Package-${{ steps.version.outputs.VERSION }}
        path: ./AppPackages/**/*
        retention-days: 30

    # Cleanup
    - name: Cleanup certificate
      if: always()
      run: |
        if (Test-Path $env:CERT_PATH) {
          Remove-Item $env:CERT_PATH -Force
          Write-Host "‚úì Certificate file cleaned up"
        }
      shell: pwsh
